package com.kurgan.kursach.controllers;import com.kurgan.kursach.models.Car;import com.kurgan.kursach.models.Card;import com.kurgan.kursach.models.Parking;import com.kurgan.kursach.models.User;import com.kurgan.kursach.service.CarService;import com.kurgan.kursach.service.ParkingService;import com.kurgan.kursach.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import java.time.LocalDate;import java.util.HashSet;import java.util.Set;@Controller@RequestMapping("/car")public class ParkingController {    @Autowired    private UserService userService;    @Autowired    private CarService carService;    @Autowired    private ParkingService parkingService;    @GetMapping("add")    public String addParking(Model model) {        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        String username = authentication.getName();        Set<Car> cars = new HashSet<>();        for (Car car : userService.findByUsername(username).getCars()) {            if (car.getParking() == null) {                cars.add(car);            }        }        model.addAttribute("cars", cars);        model.addAttribute("parkings", parkingService.findAll());        return "parking/add";    }    @PostMapping("add")    public String addParking(@ModelAttribute("parking") Long parking_id, @ModelAttribute("car") Long car_id) {        Parking parking = parkingService.getById(parking_id);        parking.getCars().add(carService.findById(car_id));        parkingService.save(parking);        return "redirect:add";    }    @GetMapping("delete")    public String deleteParking(Model model) {        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        String username = authentication.getName();        Set<Car> cars = new HashSet<>();        for (Car car : userService.findByUsername(username).getCars()) {            if (car.getParking() != null) {                cars.add(car);            }        }        model.addAttribute("cars", cars);        return "parking/delete";    }    @PostMapping("delete")    public String deleteParking(@ModelAttribute("car") Long id, @ModelAttribute("hours") String hours,                                RedirectAttributes redirectAttributes) {        Car car = carService.findById(id);        car.setParking(null);        carService.save(car);        redirectAttributes.addFlashAttribute("hours", hours);        return "redirect:show";    }    @GetMapping("show")    public String showResult(Model model) {        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        String username = authentication.getName();        User user = userService.findByUsername(username);        Card card = null;        if (user.getCard() != null){            card = user.getCard();        }        model.addAttribute("price", Double.parseDouble(String.valueOf(model.getAttribute("hours"))) * 3 * (100 - card.getDiscount())/100);        return "parking/show";    }}